###############################################################################
##  Functional Plugin Settings
###############################################################################

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = 'let g:deoplete#enable_at_startup = 1'

[[plugins]]
repo = 'Shougo/neosnippet.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [
      \     [ 'mode', 'paste' ],
      \     [ 'fugitive', 'filename' ],
      \     [ 'ale' ],
      \   ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightlineFugitive',
      \   'readonly': 'LightlineReadonly',
      \   'modified': 'LightlineModified',
      \   'filename': 'LightlineFilename',
      \   'ale': 'ALEStatus',
      \ }
      \}

function! LightlineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightlineReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return "⭤"
  else
    return ""
  endif
endfunction

function! LightlineFugitive()
  if exists("*fugitive#head")
    let branch = fugitive#head()
    return branch !=# '' ? '⭠ '.branch : ''
 endif
  return ''
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
       \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
       \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! ALEStatus()
  return ALEGetStatusLine()
endfunction
'''

[[plugins]]
repo = 'edkolev/tmuxline.vim'
hook_add = '''
    let g:tmuxline_powerline_separators = 0
    let g:tmuxline_preset = {
    \'a' :'#h',
    \'b' :'#S',
    \'x' :'#(getwifi.sh)',
    \'y' :['#(battery -tp)'],
    \'z' :['%Y %m / %d (%a)'],
    \}
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    let g:NERDTreeChDirMode=2
    let g:NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
    let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
    let g:NERDTreeShowBookmarks=1
    let g:nerdtree_tabs_focus_on_files=1
    let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
    let g:NERDTreeWinSize = 30
    set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite
    nnoremap <silent> <F2> :NERDTreeFind<CR>
    noremap <F3> :NERDTreeToggle<CR>
'''
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_linters = {
    \   'c': ['clang'],
    \   'c++': ['clang'],
    \   'javascript': ['eslint'],
    \   'typescript': ['tslint'],
    \   'php': ['php -l'],
    \   'python': ['flake8'],
    \   'ruby': ['rubocop'],
    \}
    let g:ale_sign_column_always = 1
    let g:ale_sign_error = '>>'
    let g:ale_sign_warning = '--'
    let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '']
    let g:ale_echo_msg_error_str = 'E'
    let g:ale_echo_msg_warning_str = 'W'
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
'''

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'

[[plugins]]
repo = 'Shougo/neosnippet.vim'

[[plugins]]
repo = 'Shougo/neoinclude.vim'

[[plugins]]
repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neopairs.vim'

[[plugins]]
repo = 'Shougo/neoinclude.vim'

[[plugins]]
repo = 'vim-scripts/AnsiEsc.vim'



#[[plugins]]
#repo = 'Shougo/denite'

#[[plugins]]
#repo = 'pocari/vim-denite-emoji'

###############################################################################
##  Language Plugin Settings
##############################################################################

[[plugins]] # Haml
repo  = 'tpope/vim-haml'
on_ft = 'haml'

[[plugins]] # Html5
repo  = 'othree/html5.vim'
on_ft = 'html'

[[plugins]] # Toml
repo  = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # Markdown
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown','mkd','md']
hook_add = '''
    let g:vim_markdown_frontmatter = 1
    let g:vim_markdown_math = 1
'''

[[plugins]] #vimscript
repo = 'Shougo/neco-vim'
on_ft = 'vim'

[[plugins]]
repo = 'mhartington/deoplete-typescript'
on_ft = 'typescript'

[[plugins]] # c, c++, obj-C
repo = 'Rip-Rip/clang_complete'
on_ft = ['clang','c','cpp','c++','obj-c','objc','objcpp','objective-c','objective-c++']

[[plugins]]
repo = 'tweekmonster/deoplete-clang2'
on_ft = ['clang','c','cpp','c++','obj-c']

[[plugins]]
repo = 'Robzz/deoplete-omnisharp'
on_ft = 'c#'

[[plugins]]
repo = 'landaire/deoplete-swift'
on_ft = 'swift'

[[plugins]]
repo = 'fishbullet/deoplete-ruby'
on_ft = 'ruby'

[[plugins]] # Golang
repo = 'fatih/vim-go'
on_ft = 'go'

[[plugins]] #Golang
repo = 'zchee/deoplete-go'
on_ft = 'go'

[[plugins]] # Japanese doc
repo = 'vim-jp/vimdoc-ja'
on_ft = 'help'
hook_add = '''
    set helplang=ja,en
'''

[[plugins]] # Python
repo = 'hynek/vim-python-pep8-indent'
on_ft = 'python'

[[plugins]] # Python
repo = 'davidhalter/jedi-vim'
on_ft = 'python'

[[plugins]] # Python
repo = 'andviro/flake8-vim'
on_ft = 'python'

[[plugins]]
repo = 'php-vim/phpcd.vim'
on_ft = 'php'


###############################################################################
##  ColorScheme
###############################################################################

[[plugins]]
repo = 'sickill/vim-monokai'
hook_add = 'au MyAutoCmd VimEnter * nested colorscheme monokai'

[[plugins]]
repo = 'vim-scripts/Zenburn'
#hook_add = 'au MyAutoCmd VimEnter * nested colorscheme zenburn'

[[plugins]]
repo = 'aereal/vim-colors-japanesque'
#hook_add = 'au MyAutoCmd VimEnter * nested colorscheme japanesque'


